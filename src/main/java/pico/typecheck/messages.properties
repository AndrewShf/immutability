immutable.class.type.parameter.bound.invalid=Type parameter of immutable class has non-immutable effective upper bound: %s!
constructor.invocation.invalid=Cannot not instantiate type: %s out of constructor: %s
constructor.parameter.invalid=Polyimmutable/immutable constructor cannot have parameter of type: %s
constructor.return.invalid=Invalid constructor return type: %s
immutable.class.constructor.invalid=Immutable class should only have immutable constructor
immutable.class.method.receiver.invalid=Immutable class instance method should only have immutable/readonly declared receiver
illegal.field.write=Cannot write field via receiver: %s
illegal.array.write=Cannot write array via receiver: %s
readonly.capture.mutable=Readonly field in immutable/polyimmutable constructor cannot capture mutable objects
static.field.poly.forbidden=Static field: %s cannot be @PolyImmutable
instance.field.mutable.forbidden=Instance field: %s cannot be @Mutable
pico.new.invalid=Invalid new instance type: %s
