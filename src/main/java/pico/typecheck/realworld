1. Typecasting raw iterator's next() method's return to a local variable and pass it as method invocation argument.
@Readonly cannot be passed to @Mutable parameter(default)
e.g. /home/mier/jsr308/jdepend/src/jdepend/textui/JDepend.java:241
A: it's ok because we can only conservatively say type argument is "? extends @Readonly Object". When we read, we can only say that element
type is @Readonly Object because we don't have any knowledge about what's stored inside. Since we have no knowledge about what's inside,
we can't also write anything to wildcarded types(like wildcarded lists). So here, we can only know that rhs is @Readonly Object, and that's
all. So it's OK to have method.invocation.invalid error because this is a conservative behaviour.

2. Similar to above, but now used as actual receiver
e.g. /home/mier/jsr308/jdepend/src/jdepend/textui/JDepend.java:192
A: similar to the 1.

3. cast to Number String got type cast warning: @Mutable Object to @Immutable String/Number
Algebra 655
A: This is fine: downcasting or even casting between different types are warned but allowed. Static type systems always have this loophole and
needs runtime enforcement. The only difference is that PICO doesn't have runtime checks.
We should use inference to solve this issue.

4. Calling instance method from constructor, and get fbc error
e.g. /home/mier/jsr308/jdepend/src/jdepend/textui/JDepend.java:47
A: good to print all the methods that're invoked inside constructors(-AprintFbcError). If it's a long list, then we skip the library. If it's
relatively small, we can manually annotate the libraries using @UnderInitialization.

// Solved: Use @Mutable for java.lang.Object for: 1) consistency 2)lock() and unlock() are allowed to be called by default
5. Object[] component type used as actual receiver. Invoked method has default @Mutable declared receiver
e.g. ObjectArrayList 477

6. Object[] component type is casted to local variable, and that local variable is used to call the instance method in jkd,
whose declared receiver is declared to be @Mutable
e.g. /home/mier/jsr308/colt/src/cern/colt/matrix/objectalgo/Partitioning.java:127:

7. Typecasting Object method parameter into a subtype, and call instance method on that subtype. Got method invocation error
e.g. /home/mier/jsr308/colt/src/cern/jet/stat/quantile/UnknownDoubleQuantileEstimator.java:159
// Solved: Another way is to still keep @Readonly as the default for java.lang.Object, and in downcasting locations, use @Mutable always
if no annotation exist(instead of copying @Readonly from the casted expression)

8. toString() has @Readonly declared receiver. clone() has @ReceiverDependantMutable declared receiver. Any call to instance
method with defaulted @Mutable causes warnings.
e.g. DoubleQuantileEstimator.java:251
A: toString(), hashCode(), equals() should have @Readonly receiver, and @Readonly parameter for equals() because they shouldn't change
the state of the object. If @Mutable, then abstract state fields might be changed via @Mutable reference.
We need to add back the logic of handling those three methods - i.e. copying @Readonly method receiver into subclass method receiver.
For clone() method, it makes sense to have @RDM receiver and @RDM return type. But we don't copy that into subclass. Instead, we use
the standard defaulting way(@Mutable as default qualifier).

9. Too much method invocation noise
e.g. AbstractBin 56 call to size is not allowed
A: @Readonly Object is solved by using @Mutable as default for Object;
method.invocation.invalid caused by @Readonly receiver in toString(), hashCode(), equals() is OK, as those methods should be @Readonly too.
If they(instance methods) mutate the state of the object, that state must be out of abstract state. We should use inference to propagate
@Readonly to those invoked instance methods inside toString(), hashCode(), equals().

10. clone() method:
e.g. DoubleBuffer 63
illgeal field write, return incompatible, method invocation invalid, argument type incompatible
e.g. CharArrayList.java:113
method invocation invalid, argument type incompatible
A: allow flexible overriding in mutable and immutble classes. Viewpoint adapt the super method signature to the bound of the class, and then
use the standard method overriding rules to check against that adapted method signature.

11. override methods from Object class fails because of default @Mutable declared receiver is not super type of @Readonly
e.g. /home/mier/jsr308/colt/src/cern/colt/matrix/linalg/Smp.java:36
A: Use special handling for those three methods: toString(), hashCode(), equals() (for equals(), also copy @Readonly to its parameter).

12. CFCrash
/home/mier/jsr308/colt/src/cern/colt/matrix/impl/TridiagonalDoubleMatrix2D.java
Need to investigate

13. Return type is @Readonly Object, and @Readonly propagates via type casting and caused method invocation invalid error.
e.g. ShortArrayList 354  AbstractShortList 160
A: solved by using @Mutable as the default for java.lang.Object

14. cannot override error because of no raw class
DoubleListAdapter.java:101: error: [override.param.invalid]
RawList(viewpointAdaptMethod() has problem I think)
DoubleMatrix 2349 Raw Comparator
A: there is bug in viewpoint adapter - wildcard gets lost

15. @Immutable String cannot be assigned to @Mutable(default) Object
e.g. Converter 281
sol: Use inference to insert Readonly to Object parameter(because String and other mutable objects can both be passed into Object), and
enable downcasting.

Some Gotchas:
!!! In inference mode, we shouldn't always generate (@1) @2 @2 <: @1 constraint. We need the downcasting to allow more flexbile operation
on the expression(@2)

mutable doesn't mean always mutating, but may leak the permission to let object mutated;
rdm and immutable are also "readonly" in its scope, but has more specific information

Analyzed Libraries:
colt : Used "-encoding", "cp1252" in typecheck mode
exp4j : no errors
dyn4j : QualifierPolymorphism line 206. Has exception that is framework level:
error: AsSuperVisitor: type is not an erased subtype of supertype.
  type: @Initialized @Mutable ClosestEdgeToVertexSearchCriteria
  superType: @Initialized @Mutable SweepLineEdge
  Compilation unit: /home/mier/jsr308/dyn4j/src/org/dyn4j/geometry/decompose/SweepLine.java
1 error

jblas: 26 expected errors
ejml(too large)
nd4j
ode4j: running . Found: DxRagdoll caused infinite loop
ojAlgo

2017-12-21
Only use abstract state fields in hashCode(), equals(), otherwise warn
Q: What if instance methods are called that access non-AS fields. How to track which fields are accessed?
A: @OnlyDependantASField(method annotation like @Pure, @Override): call another method with @OnlyDepdantASField or only access AS fields
Update: done. Added a new annotation @ObjectIdentityMethod to enforce shallow enforcement: f, this.f, foo(), this.foo(), super
.foo() are checked: in the first two cases, f must be within the abstract state; for 3-5, foo() must be declared with
@OnlyDependantASField, too. Also static field access is forbidden inside @OnlyDependantASField method, as static fields are
not part of the abstract state of the current receiver object.

Why having unknown initialization error?
Test, LocalVariableUsedAsArgument.java
A: File an issue LocalVariableUsedAsArgument. General problem for dataflow(already issued:
https://github.com/typetools/checker-framework/issues/1727)
For initialization specific, primitives should always be @Initialized(this may not matter that much, I think)

How to get the assignment context of a method invocation nicely?
catch(AssertionError)
https://github.com/typetools/checker-framework/blame/master/framework/src/org/checkerframework/framework/util/typeinference/TypeArgInferenceUtil.java
Try pulling from typetools, removing the several lines in assignedTo() and see if that helps resolves the problem.
Maybe remove this:
https://github.com/typetools/checker-framework/blame/master/framework/src/org/checkerframework/framework/util/typeinference/TypeArgInferenceUtil.java#L147
TODO: This still needs some investigation.

Inference of bound annotation
ImpliesConstraint: it's time to introduce this. We don't have a declarative way to specify this kind of constraints:
e.g. If bound is @Mutable(not known), please infer method declared receiver not to be @Immutable
Difference between existing Constraint and Constraints in ImpliesConstraints: use createXXXConstraint to get the reference, and cal
addImpliesConstraint to add the composite constraint into ConstraintManager.
Adding ImpliesConstraint seems helpful. Will add that.
Update: pushed to PR: https://github.com/opprop/checker-framework-inference/pull/135

Discuss Constraint hierarchy
Don't need CompositeConstraint, becasue we already don't have a API in ConstraintManager that accepts a parameter of type XXXConstraint,
so adding add(CompositeConstraint) doesn't really help.

TODO: Anonymous class initialization problem(bound):
Add helper method(maybe make it directly as standard behavior if it applies to every type system) to get the of annonymous class, which
should be the bound annotation of its super class(need to see if this really makes sense)
NewAnnonymousClass

2018-01-05
TODO: StackOverflowException on PICOStore(run PICO on PICO source file)

Explain unsatisfiable
Update: code reviewing: https://github.com/opprop/checker-framework-inference/pull/128

Successful Projects:
=================
1. AFHbackdoor(317 lines): Not so good material because methods are not called, so the inference result is not good.
For projects like this, if this project uses third party APIs, we must have some stub files for those APIs, because
@Immutable primitives could cause inference fail because by default @Mutable is the default for every bytecode. At least
we should have a bare minimum stub file for classes&methods that are referenced from this project. Otherwise, the project
analysis can't continue. Hopefully, this won't take too much time.
Example: package org.hibernate;
         class Session {
           Object get(@Readonly Class clazz, @Readonly Serializable id);
         }
If we don't have this stub, then everything is by default @Mutable, thus 2 can't be passed into Session#get() method and
caused inference to give no solution and triggers explanation.

2. bdoorProto(1299 lines): gets inferred solutions, but wasn't able to insert back.
This is due to bug https://github.com/typetools/annotation-tools/issues/154.

Remove constructor return for class Command, and use the following command will successfully insert solutions:
~/jsr308/annotation-tools/annotation-file-utilities/scripts/insert-annotations-to-source logs/infer_result_0.jaif
 /home/mier/jsr308/corpus/corpus/bdoorProto/src/bdoorProto/Command.java /home/mier/jsr308/corpus/corpus/bdoorProto/
 src/bdoorProto/Packet.java /home/mier/jsr308/corpus/corpus/bdoorProto/src/bdoorProto/PacketFactory.java /home/mier/
 jsr308/corpus/corpus/bdoorProto/src/bdoorProto/PacketHeader.java /home/mier/jsr308/corpus/corpus/bdoorProto/src/
 bdoorProto/PacketUtils.java /home/mier/jsr308/corpus/corpus/bdoorProto/src/bdoorProto/PingCommand.java
 /home/mier/jsr308/corpus/corpus/bdoorProto/src/bdoorProto/Reply.java /home/mier/jsr308/corpus/corpus/bdoorProto/src/
 bdoorProto/Request.java

Doesn't have fbc errors.

3. ECC-RSA-Backdoor(2822 lines): Gets inferred solutions, and solutions were inserted back to source code. This project has
fbc errors(instance methods called inside constructors), but still gets solutions. But those who assign field gets inferred
to have @Mutable declared receiver. If those instance methods are properly annotated with @UnderInitialization manually,
the results may contain more @Immutable and @Readonly, I believe.
Updated jdk.astub on ArrayList class to really use @Readonly declared receiver for isEmpty(), size() methods etc., so
that if they are called from toString() method, there will be solution. Otherwise, due to well-formedness constraint,
there wasn't solution.
One bug in annotation-tools makes the insertion fail. Already opened an issue for this. See:
https://github.com/typetools/annotation-tools/issues/155

Before and after adding @UnderInitialization:
    private void copy(@UnderInitialization @Immutable BinNum this, @Mutable ALB num){
        this.num = new @Mutable ALB().addA(num);
    }

    private void copy(@UnderInitialization @ReceiverDependantMutable BinNum this, @Readonly BinNum that){
        this.num = new @Mutable ALB().addA(that.get());
    }

    /*---------------------------INITIALIZERS----------------------*/

    public @ReceiverDependantMutable BinNum(){
        this.num = new @Mutable ALB();
    }

    public @ReceiverDependantMutable BinNum(@Readonly BinNum that){
        copy(that);
    }

    public @Immutable BinNum(@Immutable String num){
        copy(new @Mutable ALB().init(num));
    }

4. jdepend(6936 lines): found non-compliance code that modifies abstract state of receiver object in toString() method.
class AfferentNode extends PackageNode {
  ...
  public String toString() {
          if (getParent() == null) {
              return "Used By - Afferent Dependencies" + " ("
                      + getChildren().size() + " Packages)";
          }

          return super.toString();
  }
  ...
}

class PackageNode {
  ...
  public ArrayList getChildren() {

          if (children == null) {

              children = new ArrayList();
              ArrayList packages = new ArrayList(getCoupledPackages());
              Collections.sort(packages, new PackageComparator(PackageComparator
                      .byName()));
              Iterator i = packages.iterator();
              while (i.hasNext()) {
                  JavaPackage jPackage = (JavaPackage) i.next();
                  if (isChild(jPackage)) {
                      PackageNode childNode = makeNode(this, jPackage);
                      children.add(childNode);
                  }
              }
          }

          return children;
  }
  ...
}
1) After making "children" field @Assignable, the program was successfully inferred and inserted results. But before that,
there is no solution, but explanation gives unsatisfiable constraints.
2) One interesting fact about jdepend is that: it doesn't use generics. PICOInfer overrides VariableAnnotator's behaviour to
not copy original type variables bounds annotations to wildcard(type argument for raw types) bounds; Instead, apply default
@Mutable like the typechecking side behaviour. This solved problem of passing @Readonly to default @Mutable method receiver or
parameters which is from bytecode.
3) Another interesting thing is: in order to successfully infer jdepnd, we should allow anycast, i.e. don't generate any
constraint on type casting, including even ComparableConstraint. Otherwise, if you cast raw iterator's result(? extends @Mutable)
to String, inference will exit saying "comparable.constraint.unsatisfiable". This type of cast exists in jdpend.

5. jReactPhysics3D(10454 lines): inferred solutions but failed to insert solutions to source code. The same reason as above.

6. JLargeArrays(11337 lines): successfully inferred solutions and inserted results.

7. jblas(11841 lines): inference failed and triggerred explanation
Update: successfully inferred results for jblas, but annotation-tools wasn't successful to insert solutions back to source.
Insertion failure reason is the same as above.
Has fbc errors.

8. exp4j(31327 lines): successfully inferred results, but wasn't fully inserted solutions. Insertion failure reason is the same
as above.

9. imgscalr(1996 lines): successfully inferred solutions and inserted solutions.

10. jama(4772 lines): successfully inferred solutions and inserted solutions.

11. react(10095 lines): inferred solutions, but failed to insert solutions back. The same insertion failure reason as above.

12. jump(2096 lines): inferred solutions, but failed to insert. The same insertion failure reason.

Right now, successfully inferred on 12 projects. There are two annotation-tools bugs that caused solutions insertion fail.

====================

Failed Projects:

Facedetection(538 lines): Failed because of wrong dataflow constraint generation. Needs discussion. See notes

ode4j(85504 lines):

dyn4j: SEVERE: Non-OK return code from javac! Quitting. Result code is: ERROR
       Jan 07, 2018 7:19:17 PM checkers.inference.InferenceMain$DefaultResultHandler handleCompilerResult
       SEVERE: error: AsSuperVisitor: type is not an erased subtype of supertype.
         type: @VarAnnot(145) @Readonly ClosestEdgeToVertexSearchCriteria
         superType: @VarAnnot(144) @Readonly SweepLineEdge

ojAlgo: too many errors. Given up.

==================== Failed projects end

bdoorClient:
if generate inequality constraint from @Bottom in validator, some instance method receiver were still inferred
@Bottom. This is incorrect. Should work on this.
Find a way to forbid explicit use of @Bottom but permit internal use
Update: solved by overriding VariableAnnotator#createVariable() to also generate inequality constraint between ordinary
VariableSlot and @Bottom. And change VariableAnnotator to only call createVariable() method to apply for a new Variable-
Slot instead of calling slotManager(changed 1st line of VariableAnnotator#addImpliedPrimaryVariable())

Unable to insert constructor return type is still a problem now. Need to fix this.
Update: this is fixed by PR: https://github.com/opprop/checker-framework-inference/pull/129. This triggers a bug in
annotation-tools: https://github.com/typetools/annotation-tools/issues/154


Investigate Request Packet for possible constructor invocation error
Update: Used FieldAssignCase2_1 to reproduce the problem and the generated constraints look no problem. But to be more
sure, investigate it more!
Update2: there is no problem in generating the constraints when invoking super constructor. Instead, it is the problem
in annotation-tools: it doesn't insert annotations back to source code. CFI generates VariableSlots correctly, generates
Constraints correctly and the inferred result is also correct. Issue link is here:
https://github.com/opprop/checker-framework-inference/issues/131
Constructor return type fix is also in local. Need to push to remote.
Update: pushed to remote already. PR: https://github.com/opprop/checker-framework-inference/pull/129

Six projects in corpus folder are really good benchmark projects that are not too big but still big enough to discover
problems in inference. Should make these six project pass with no errors first. This is the most important thing to do
right now.
Update: Ran old version of PICOInference on six project, got good results on two projects - ECC-RSA-Backdoor and JBS.
Inferred results look good.
Update PICOInfer to reflect class bound annotation
Update: Done.

InfrenceFailureReason:
dataflow calls isSubtype() between two ConstantSlots that are not subtype, and it generates SubtypeConstraint and since
we early fail inference, we get error and abort the inference process. Changed this by checking the subtype relation
really holds or not and simply return true/false without generating SubtypeConstraint.
Might still have other places that have similar errors. For example, always generate EqualityConstraint without
verifying if two ConstantSlot really satisfy relationship, i.e. EqualityConstraint
Update: no other places found, according to my investigation. There are no places like isSubtype() to know the specific
(subtype/equality/inequality) relation to hold or not.

bytecode type uses default @Mutable, but @Immutable types such as string and integer is also passed in.

Wildcard lower bound can have explicit @Bottom inferred. Otherwise, also caused inference fail in JLargeArrays.

Wildcard upper bound wasn't defaulted to @Mutable, instead copied from @Readonly.

type cast not comparable/not subtype between two constant slots.

real program bug. One encountered is in toString() method, reassigns field. This is in project jdpend. See above for details.

subtype constraint between lub and two ingredient slots when lub type is implicitly immutable(also genereated new LubVariableSLot
). Plus enum constant was always @Mutable. These two errors revealed the problem.

http://errorprone.info/bugpattern/Immutable
Restul: ALB cannot be immutable class just because it extends from ArrayList and there is elementData field which is not
final. This is a very strict schema. But in PICO, ALB can still be immutable class, as along as it passes PICOChecker:
elementData won't be reassigned; elementData cannot be assigned to new element; cannot call mutating methods on ALB
instance, so ALB is effectively immutable.
ErrorProne doesn't allow an immutable class to have array typed field, because it treats every array as mutable.
Example:

@Immutable
public class Test {
    final Object[] f;// This is not allowed in error prone, because there is no way to annotated array to be @Immutable
    // in error prone
    Test() {
        f = new String []{"HELLO"};
    }
}


But pico allows this:
@Immutable
public class Test {
    final @Readonly Object[] f;
    @Immutable Test() {
        f = new String @Immutable []{"HELLO"};
    }

    void mutate(@Readonly Test this) {
        f[0] = 2;
    }
}

TODO Viewpoint adapter adds support for adapting intersection and union type.
ojALgo throws such exception.

TODO File issue for mutating atm in inference. Reproduce in OsTrusted.

!!! If a tree gets inferred solution, but wasn't inserted solution, it might be related to issue:
https://github.com/opprop/checker-framework-inference/issues/131
