import qual.Mutable;
import qual.Immutable;
import qual.ReceiverDependantMutable;
import qual.Readonly;

package java.lang;

class Object {
  @ReceiverDependantMutable Object();
  String toString(@Readonly Object this);
  int hashCode(@Readonly Object this);
  boolean equals(@Readonly Object this, @Readonly Object var1);
  @ReceiverDependantMutable Object clone(@ReceiverDependantMutable Object this);
}

class String {
  int length(@Readonly String this);
  char charAt(@Readonly String this, int var1);
  String substring(@Readonly String this, int var1);
  String substring(@Readonly String this, int var1, int var2);
  String toString(@Readonly String this);
}

class Throwable {
  String getMessage(@Readonly Throwable this);
  String getLocalizedMessage(@Readonly Throwable this);
  Throwable getCause(@Readonly Throwable this);
  void printStackTrace(@Readonly Throwable this);
  void printStackTrace(@Readonly Throwable this, PrintStream var1);
  void printStackTrace(@Readonly Throwable this, Throwable.PrintStreamOrWriter var1);
}

package java.util;

class Date {
  @ReceiverDependantMutable Date();
  @ReceiverDependantMutable Date(long var1);
  int getHours(@Readonly Date this);
}

class ArrayList<E> {
  @ReceiverDependantMutable ArrayList();
  boolean add(@Mutable ArrayList<E> this, E var1);
}

class HashSet<E> {
  boolean contains(@Readonly Object var1);
  boolean remove(@Readonly Object var1);
}

class Stack<E> {
  E peek(@Readonly Stack<E> this);
  boolean empty(@Readonly Stack<E> this);
}

class Vector<E> {
  boolean isEmpty(@Readonly Vector<E> this);
}

package java.io;

class PrintStream {
  void print(@Readonly PrintStream this, String var1);
}
