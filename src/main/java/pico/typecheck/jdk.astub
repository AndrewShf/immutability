import qual.Mutable;
import qual.Immutable;
import qual.ReceiverDependantMutable;
import qual.Readonly;

package java.lang;

@ReceiverDependantMutable
class Object {
  @ReceiverDependantMutable Object();
  String toString(@ReceiverDependantMutable Object this);
  int hashCode(@ReceiverDependantMutable Object this);
  boolean equals(@ReceiverDependantMutable Object this, @ReceiverDependantMutable Object var1);
  @ReceiverDependantMutable Object clone(@ReceiverDependantMutable Object this);
}

class String {
  int length(@Immutable String this);
  char charAt(@Immutable String this, int var1);
  String substring(@Immutable String this, int var1);
  String substring(@Immutable String this, int var1, int var2);
  String toString(@Immutable String this);
  boolean equals(@Immutable Object var1);
  static String valueOf(@Readonly Object var0);
}

@ReceiverDependantMutable
class Throwable {
  String getMessage(@ReceiverDependantMutable Throwable this);
  String getLocalizedMessage(@ReceiverDependantMutable Throwable this);
  Throwable getCause(@ReceiverDependantMutable Throwable this);
  void printStackTrace(@ReceiverDependantMutable Throwable this);
  void printStackTrace(@ReceiverDependantMutable Throwable this, PrintStream var1);
  void printStackTrace(@ReceiverDependantMutable Throwable this, Throwable.PrintStreamOrWriter var1);
}

package java.util;

@ReceiverDependantMutable
class Date {
  @ReceiverDependantMutable Date();
  @ReceiverDependantMutable Date(long var1);
  int getHours(@ReceiverDependantMutable Date this);
}

@ReceiverDependantMutable
class ArrayList<E> {
  @ReceiverDependantMutable ArrayList();
  @ReceiverDependantMutable ArrayList(@Readonly Collection<? extends E> var1);
  boolean add(@Mutable ArrayList<E> this, E var1);
}

@ReceiverDependantMutable
interface List<E> {}

@ReceiverDependantMutable
class AbstractList<E> {
  @ReceiverDependantMutable AbstractList();
  void add(@Mutable AbstractList<E> this, int var1, E var2);
}

@ReceiverDependantMutable
interface Set<E> {
  boolean contains(@Readonly Object var1);
}

@ReceiverDependantMutable
class HashSet<E> {
  @ReceiverDependantMutable HashSet();
  @ReceiverDependantMutable HashSet(@Readonly Collection<? extends E> var1);
  boolean contains(@Readonly Object var1);
  boolean remove(@Readonly Object var1);
}

@ReceiverDependantMutable
interface Map<K, V> {
  boolean containsKey(@Readonly Object var1);
  V get(@Readonly Object var1);
}

@ReceiverDependantMutable
class HashMap<K, V> {
  @ReceiverDependantMutable HashMap();
  @ReceiverDependantMutable HashMap(@Readonly Map<? extends K, ? extends V> var1);
}

class Arrays {
  static <T> @Immutable List<T> asList(T... var0);
}

@ReceiverDependantMutable
class Stack<E> {
  E peek(@ReceiverDependantMutable Stack<E> this);
  boolean empty(@ReceiverDependantMutable Stack<E> this);
}

@ReceiverDependantMutable
class Vector<E> {
  boolean isEmpty(@ReceiverDependantMutable Vector<E> this);
}

package java.io;

@ReceiverDependantMutable
class PrintStream {
  void print(@ReceiverDependantMutable PrintStream this, String var1);
}
